#include "ergovision.dtsi"

#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zmk,kscan = &default_kscan;
        zmk,matrix_transform = &default_transform;
    };

    default_kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "default_kscan";
        diode-direction = "col2row";

        row-gpios = <
            &pro_micro 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
        >;
        
        col-gpios = <
            &pro_micro 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 8 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
        >;
    };

    default_transform: matrix_transform {
        compatible = "zmk,matrix-transform";
        columns = <6>;
        rows = <5>;

        map = <
            RC(0,5) RC(0,4) RC(0,3) RC(0,2) RC(0,1) RC(0,0)
            RC(1,5) RC(1,4) RC(1,3) RC(1,2) RC(1,1) RC(1,0)
            RC(2,5) RC(2,4) RC(2,3) RC(2,2) RC(2,1) RC(2,0)
            RC(3,5) RC(3,4) RC(3,3) RC(3,2) RC(3,1) RC(3,0)
                                    RC(4,2) RC(4,1) RC(4,0)
        >;
    };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp N1     &kp N1     &kp N2     &kp N3     &kp N4     &kp N5
                &kp TAB    &kp Q      &kp W      &kp E      &kp R      &kp T
                &kp LSHIFT &kp A      &kp S      &kp D      &kp F      &kp G
                &kp LCTRL  &kp z      &kp X      &kp C      &kp V      &kp B
                                                 &kp ALT    &kp BSPC   &kp SPACE
            >;
        
        };
    };
};

    &i2c0 {
        status = "okay";

        glidepoint0: glidepoint@2a {
            compatible = "cirque,pinnacle";
            reg = <0x2a>;
            status = "okay";
            dr-gpios = <&pro_micro 10 (GPIO_ACTIVE_HIGH)>;

            sensitivity = "2x";
            sleep;
            //no-taps;
        };
    };

    /* Assign `input-listener` to all pointing devices */
    /* &glidepoint0 on central, &glidepoint1 on peripheral */
    tpad_central_listener {
        compatible = "zmk,input-listener";
        device = <&glidepoint0>;
        //xy-swap;
        y-invert;
        //x-invert;
        scale-multiplier = <2>;
    };

    tpad_peripheral_listener {
        compatible = "zmk,input-listener";
        device = <&glidepoint1>;
        //xy-swap;
        y-invert;
        //x-invert;
        scale-multiplier = <2>;
    };
};

/ {
    /* define virtual input, will be resurrected for emitting input event */
	/* NOTE: set `device = <&glidepoint1>` in `zmk,input-listener` */
	glidepoint1: virtual_input {
		compatible = "zmk,virtual-input";
	};

	/* for central side, define (relay-channel)-to-(virtual-input) mapping */
	input_relay_config_102 {
		compatible = "zmk,split-peripheral-input-relay";
		
		/* channel id, used to filter incoming input event from split peripheral */
		/* NOTE: should matching relay-channel on peripheral overlay */
		relay-channel = <102>;

		/* virtual input device on central, which used to emit input event as an agent device */
		device = <&glidepoint1>;
	};
};