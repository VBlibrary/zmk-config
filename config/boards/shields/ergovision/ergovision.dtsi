#include <dt-bindings/zmk/matrix_transform.h>

 / {
    chosen {
        zmk,kscan = &default_kscan;
        zmk,matrix_transform = &default_transform;
    };

    // Keyboard scanning matrix
    default_kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "default_kscan";
        diode-direction = "col2row";

        row-gpios = < 
            &pro_micro 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
        >;

        col-gpios = <
            &pro_micro 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 8 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
        >;
    };

    // Matrix transformation
    default_transform: matrix_transform {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <5>;

        map = < 
            RC(0,5) RC(0,4) RC(0,3) RC(0,2) RC(0,1) RC(0,0)                RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
            RC(1,5) RC(1,4) RC(1,3) RC(1,2) RC(1,1) RC(1,0)                RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
            RC(2,5) RC(2,4) RC(2,3) RC(2,2) RC(2,1) RC(2,0)                RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
            RC(3,5) RC(3,4) RC(3,3) RC(3,2) RC(3,1) RC(3,0)                RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11)                        
                                    RC(4,2) RC(4,1) RC(4,0)                RC(4,6) RC(4,7) RC(4,8)
        >;
    };

    // Split configuration for pointing devices
    split_inputs {
        #address-cells = <1>;
        #size-cells = <0>;

        glidepoint_split: glidepoint_split@0 {
            compatible = "zmk,input-split";
            reg = <0>;
        };
    };

    glidepoint_listener: glidepoint_listener {
        compatible = "zmk,input-listener";
        status = "disabled"; // Enabled on the central side
        device = <&glidepoint_split>;
    };
    
&pinctrl {
    /* configuration for i2c0 device, default state */
    i2c0_default: i2c0_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 7)>,
                <NRF_PSEL(TWIM_SCL, 0, 27)>;
        };
    };

    i2c0_sleep: i2c0_sleep {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 7)>,
                <NRF_PSEL(TWIM_SCL, 0, 27)>;
            low-power-enable;
        };
    };
};
    &i2c0 {
        status = "okay"; // Enable I2C1 for the Nice Nano V2
        sda-pin = <2>;    // Specify the SDA pin for I2C1
        scl-pin = <3>;    // Specify the SCL pin for I2C1

        glidepoint: glidepoint@0 {
            compatible = "cirque,pinnacle";  // Trackpad device type
            reg = <0>;                      // I2C address of the trackpad
            status = "okay";
            sensitivity = <4>;               // Adjust sensitivity
            no-taps;                         // Disable tap gestures
            sleep;                           // Enable sleep mode for power-saving
        };
    };

    // Input processing for the trackpad
    &mmv {
        x-input-code = <INPUT_REL_X>;  // X-axis movement
        y-input-code = <INPUT_REL_Y>;  // Y-axis movement
        time-to-max-speed-ms = <300>;   // Time to reach max speed
        acceleration-exponent = <1>;    // Acceleration curve
    };
};
    