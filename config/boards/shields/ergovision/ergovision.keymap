/*
 * Copyright (c) 2020 ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <behaviors/mouse_move.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>


#define DEF 0;
#define NAV 1;
//#define MSK 2;
/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp ESC      &kp N1     &kp N2     &kp N3     &kp N4     &kp N5                   &kp N6     &kp N7     &kp N8     &kp N9     &kp N0     &bt BT_CLR
                &kp CAPSLOCK &kp Q      &kp W      &kp E      &kp R      &kp T                    &kp Y      &kp U      &kp I      &kp O      &kp P      &kp RALT
                &kp LSHIFT   &kp A      &kp S      &kp D      &kp F      &kp G                    &kp H      &kp J      &kp K      &kp L      &kp SEMI   &kp RSHIFT
                &kp LCTRL    &kp Z      &kp X      &kp C      &kp V      &kp B                    &kp N      &kp M      &kp COMMA  &kp DOT    &kp SLASH  &kp RCTRL
                                                   &kp TAB    &kp BSPC   &kp SPACE                &kp SPACE   &kp ENTER &kp LEFT_WIN
            >;
        };
        nav {
            bindings = <
                &kp F1      &kp F2     &kp F3     &kp F4     &kp F5     &kp F6                    &kp F7     &kp F8     &kp F9     &kp F10    &kp F11    &kp F12
                &bt BT_CLR &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &kp T              &kp Y      &kp U      &kp UP     &kp O      &kp P      &kp RALT
                &kp LSHIFT   &kp none   &kp none   &kp none  &kp none   &kp none                  &kp H      &kp LEFT   &kp DOWN   &kp RIGHT  &kp SEMI   &kp RSHIFT
                &kp LCTRL    &kp none   &kp none   &kp none  &kp none   &kp none                  &kp K_MUTE &kp M      &kp COMMA  &kp DOT    &kp SLASH  &kp RCTRL
                                                   &kp TAB   &kp BSPC   &kp SPACE                 &kp SPACE  &kp ENTER &tog 1
            >;
        };
    
    };


};

/ {
    /* Input behavior for mouse movement mode */
    tb0_mmv_ibl {
        compatible = "zmk,input-behavior-listener";
        device = <&glidepoint0>;   // Left side trackpad
        layers = <0 2>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <1>;
        bindings = <&ib_tog_layer 1>;
        rotate-deg = <0>;
    };

    /* Input behavior for mouse movement on the right side */
    tb1_mmv_ibl {
        compatible = "zmk,input-behavior-listener";
        device = <&glidepoint1>;  // Right side trackpad
        layers = <0 2>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <1>;
        bindings = <&ib_tog_layer 1>;
        rotate-deg = <0>;
    };

    /* Adjust cooldown waiting period for mouse key layer (MSK) */
    ib_tog_layer: ib_tog_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <1000>;
    };
};