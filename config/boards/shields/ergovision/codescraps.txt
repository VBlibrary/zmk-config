/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp ESC    &kp N1     &kp N2     &kp N3     &kp N4     &kp N5
                &kp TAB    &kp Q      &kp W      &kp E      &kp R      &kp T
                &kp LSHIFT &kp A      &kp S      &kp D      &kp F      &kp G
                &kp LCTRL  &kp z      &kp X      &kp C      &kp V      &kp B
                                                 &kp ALT    &kp BSPC   &kp SPACE
            >;
        
        };
    };
};


/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp N6     &kp N7     &kp N8     &kp N9     &kp N0     &kp DELETE
                &kp Y      &kp U      &kp I      &kp O      &kp P      &kp RALT
                &kp H      &kp J      &kp K      &kp L      &kp SEMI   &kp RSHIFT
                &kp N      &kp M      &kp COMMA  &kp DOT    &kp SLASH  &kp RCTRL
                &kp SPACE  &kp BSPC   &kp ENTER
            >;
        
        };
    };
};


left overlay old version with all definitions
/ {
    chosen {
        zmk,kscan = &default_kscan;
        zmk,matrix_transform = &default_transform;
    };

    default_kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "default_kscan";
        diode-direction = "col2row";

        row-gpios = <
            &pro_micro 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
        >;
        
        col-gpios = <
            &pro_micro 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 8 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
            &pro_micro 9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)
        >;
    };

    default_transform: matrix_transform {
        compatible = "zmk,matrix-transform";
        columns = <6>;
        rows = <5>;

        map = <
            RC(0,5) RC(0,4) RC(0,3) RC(0,2) RC(0,1) RC(0,0)
            RC(1,5) RC(1,4) RC(1,3) RC(1,2) RC(1,1) RC(1,0)
            RC(2,5) RC(2,4) RC(2,3) RC(2,2) RC(2,1) RC(2,0)
            RC(3,5) RC(3,4) RC(3,3) RC(3,2) RC(3,1) RC(3,0)
                                    RC(4,2) RC(4,1) RC(4,0)
        >;
    };


beginning led implementation

    &led_strip {
    compatible = "sk6812";
    pin = <&gpio0 27 GPIO_OUTPUT_ACTIVE>;
    chain-length = <27>;
    label = "SK6812_Mini_E_Left";
};


{
     &i2c0 {
        status = "okay";

        glidepoint0: glidepoint@2a {
            compatible = "cirque,pinnacle";
            reg = <0x2a>;
            status = "okay";
            dr-gpios = <&pro_micro 10 (GPIO_ACTIVE_HIGH)>;

            sensitivity = "2x";
            sleep;
            //no-taps;
        };
    };

    /* Assign `input-listener` to all pointing devices */
    /* &glidepoint0 on central, &glidepoint1 on peripheral */
    tpad_central_listener {
        compatible = "zmk,input-listener";
        device = <&glidepoint0>;
        //xy-swap;
        y-invert;
        //x-invert;
        scale-multiplier = <2>;
    };

    tpad_peripheral_listener {
        compatible = "zmk,input-listener";
        device = <&glidepoint1>;
        //xy-swap;
        y-invert;
        //x-invert;
        scale-multiplier = <2>;
    };
};
/ {
    /* define virtual input, will be resurrected for emitting input event */
	/* NOTE: set `device = <&glidepoint1>` in `zmk,input-listener` */
	glidepoint1: virtual_input {
		compatible = "zmk,virtual-input";
	};

	/* for central side, define (relay-channel)-to-(virtual-input) mapping */
	input_relay_config_102 {
		compatible = "zmk,split-peripheral-input-relay";
		
		/* channel id, used to filter incoming input event from split peripheral */
		/* NOTE: should matching relay-channel on peripheral overlay */
		relay-channel = <102>;

		/* virtual input device on central, which used to emit input event as an agent device */
		device = <&glidepoint1>;
	};
};


 &i2c0 {
        status = "okay";

        glidepoint0: glidepoint@2a {
            compatible = "cirque,pinnacle";
            reg = <0x2a>;
            status = "okay";
            dr-gpios = <&pro_micro 10 (GPIO_ACTIVE_HIGH)>;

            sensitivity = "2x";
            sleep;
            //no-taps;
        };
    };

    /* Assign `input-listener` to all pointing devices */
    /* &glidepoint0 on central, &glidepoint1 on peripheral */
    tpad_central_listener {
        compatible = "zmk,input-listener";
        device = <&glidepoint0>;
        //xy-swap;
        y-invert;
        //x-invert;
        scale-multiplier = <2>;
    };

    tpad_peripheral_listener {
        compatible = "zmk,input-listener";
        device = <&glidepoint1>;
        //xy-swap;
        y-invert;
        //x-invert;
        scale-multiplier = <2>;
    };
};

&i2c0 {
    status = "okay";
    glidepoint0: glidepoint@2a {
        status = "okay";
    };
};

&i2c0_default {
    group1 {
      bias-pull-up;
    };
};

/ {
    /* THIS only makes keymap binding happy, nothing happens on peripheral side */
	glidepoint1: virtual_input {
		compatible = "zmk,virtual-input";
	};

    input_relay_config_102 {
        compatible = "zmk,split-peripheral-input-relay";

        /* peripheral side input device, used to... */
		/*  - be intecepted on peripheral; */
		/*  - and then, be resurrected as `zmk,virtual-device` on central; */
        device = <&glidepoint0>;

        /* channel id, used to be be transfered along with all input events. */
		/* NOTE 1: pick any 8bit integer. (1 - 255) */
		/* NOTE 2: should matching relay-channel on central overlay */
		relay-channel = <102>;
    };
};

dtsi part for leds

&pwm0 {
    status = "disabled";
    pinctrl-0 = <&pwm0_default>;
    pinctrl-names = "default";
};

pwm0_default: pwm0_default {
    group1 {
        psels = <27>;  // Pin 27 for PWM output
    };
};

input listener read me code adapted to glidepoint

/ {
    /* input config for mouse move mode on default layer (DEF & MSK) */
 tb0_mmv_ibl {
                /* new forked compatible name */
                compatible = "zmk,input-behavior-listener";
                
                /* the input point device alias */
                device = <&glidepoint0>;

                /* only enable in default layer (DEF) & mouse key layer (MSK) */
                layers = <DEF>;

                /* event code value to override raw input event */
                /* designed for switching to mouse scroll, xy-swap, precise-mode+, etc */
                /* NOTE: only apply input-code overriding for INPUT_EV_REL */
                evt-type = <INPUT_EV_REL>;
                x-input-code = <INPUT_REL_X>;
                y-input-code = <INPUT_REL_Y>;
                scale-multiplier = <1>;
                scale-divisor = <1>;

                /* bind a behavior to auto activate MSK layer for &mkp */
                bindings = <&ib_tog_layer MSK>;

                /* align to CCW 45 degree */
                rotate-deg = <315>;
                /* NOTE 1: This settings do not compitable with y-invert and x-invert */
                /* NOTE 2: Floating point computation requires alot of ram. */
               /*         This feature will cuase stackover flow with CONFIG_ZMK_USB_LOGGING=y */
     };
  
        /* input config for mouse scroll mode on momentary mouse scoll layer (MSC) */
   tb0_msl_ibl {
                compatible = "zmk,input-behavior-listener";
                device = <&glidepoint0;
                layers = <MSC>;
                evt-type = <INPUT_EV_REL>;
                
                /* slienting x-axis with alt event code */
                x-input-code = <INPUT_REL_MISC>;
                y-input-code = <INPUT_REL_WHEEL>;

                /* invent scrolling direction */
                y-invert;

                /* align to CCW 45 degree */
                rotate-deg = <315>;
                /* NOTE 1: This settings do not compitable with y-invert and x-invert */
                /* NOTE 2: Floating point computation requires alot of ram. */
                /*         This feature will cuase stackove flow with CONFIG_ZMK_USB_LOGGING=y */

                /* bind a behavior to down scaling input value to (1/8) */
                /* NOTE: This behavior memorizes recent pending displacement, it is different to scale-divisor. */
                /*       The delta value is accumlated until result >= 1 after cast. */
                /*       The scrolling will be smoother and allow precise scrolling */
                bindings = <&ib_wheel_scaler 1 8>;
         };

        /* adjust cooldown waiting period for mouse key layer (MSK) after activated */
        ib_tog_layer: ib_tog_layer {
                compatible = "zmk,input-behavior-tog-layer";
                #binding-cells = <1>;
                time-to-live-ms = <1000>;
         };

        /* define a resolution down scaler only for INPUT_REL_WHEEL */
        ib_wheel_scaler: ib_wheel_scaler {
                compatible = "zmk,input-behavior-scaler";
                #binding-cells = <2>;
                evt-type = <INPUT_EV_REL>;
                input-code = <INPUT_REL_WHEEL>;
         };
         
         
 }; 

       

       &i2c0 {
    status = "okay";

    trackpad0: cirque@2a {
        compatible = "cirque,trackpad";
        reg = <0x2a>;
        /* Additional properties specific to trackpad0 if needed */
    };

    trackpad1: cirque@2b {
        compatible = "cirque,trackpad";
        reg = <0x2b>;
        /* Additional properties specific to trackpad1 if needed */
    };
};
